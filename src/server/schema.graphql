type Query {
  hello: String!
  feed(skip: Int, take: Int, orderBy: ProjectOrderByInput): [Project!]!
  comments(
    projectId: Int!
    skip: Int
    take: Int
    orderBy: CommentOrderByInput
  ): [Comment!]!
  authorize: User

  project(id: Int!): Project

  user(id: Int!): User
  userProjects(
    id: Int!
    skip: Int
    take: Int
    orderBy: ProjectOrderByInput
  ): [Project!]
  userComments(
    id: Int!
    skip: Int
    take: Int
    orderBy: CommentOrderByInput
  ): [Comment!]
  userLikes(id: Int!, skip: Int, take: Int, orderBy: LikesOrderByInput): [Like!]
}

input LikesOrderByInput {
  id: Sort
  date: Sort
}

input CommentOrderByInput {
  id: Sort
  date: Sort
}

input ProjectOrderByInput {
  id: Sort
  title: Sort
  href: Sort
  date: Sort
}

enum Sort {
  asc
  desc
}

type Mutation {
  authorizeWithGithub(code: String!): AuthPayLoad

  addProject(
    title: String!
    href: String!
    tags: [String!]
    imgUrl: String
    description: String
    github: String
    techTags: [String!]
  ): Project

  likeProject(id: Int!): Like
  unlikeProject(id: Int!): Int

  updateProject(
    id: Int!
    href: String
    title: String
    techTags: [String!]
    tags: [String!]
    imgUrl: String
    description: String
    github: String
  ): Project

  deleteProject(id: Int!): DeletedProject

  makePictureOfWebsite(href: String!): String

  addComment(projectId: Int!, text: String!): Comment
  removeComment(commentId: Int!): Int
}

type AuthPayLoad {
  token: String!
  user: User!
}

type User {
  id: Int!
  verified: Boolean!
  registeredAt: String!
  name: String!
  email: String!
  posts: [Project!]!
  likes: [Like!]!
  comments: [Comment!]!
  projectCount: Int!
  likeCount: Int!
  commentCount: Int!
}

type Comment {
  id: Int!
  date: String!
  text: String!
  postedBy: User!
  postedUnder: Project!
}

type Like {
  id: Int!
  date: String!
  user: User!
  project: Project!
}

type DeletedProject {
  id: Int!
  title: String!
  href: String!
  postedBy: User
  date: String!
  github: String!
  description: String!
  imgUrl: String!
  techTags: [String!]
}

type Project {
  id: Int!
  title: String!
  href: String!
  tags: [Tag!]!
  date: String!
  postedBy: User
  imgUrl: String!
  github: String!
  description: String!
  likes: [Like!]!
  likeCount: Int!
  techTags: [String!]!
  commentCount: Int!
  comments: [Comment!]!
}

type Tag {
  id: Int!
  name: String!
  projects: [Project!]!
}
